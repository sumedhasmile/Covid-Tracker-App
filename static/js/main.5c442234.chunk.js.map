{"version":3,"sources":["components/Cards/Cards.module.css","api/index.js","components/Cards/Cards.jsx","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","images/image.png","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css"],"names":["module","exports","url","fetchData","country","a","changeableUrl","axios","get","data","confirmed","recovered","deaths","lastUpdate","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Cards","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","App","state","fetchedData","setState","this","src","coronaImage","image","alt","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5c442234.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import axios from 'axios';\n\nconst url = 'https://covid19.mathdro.id/api';\n\n\n export const fetchData = async (country) =>{\n\n   let changeableUrl =url;\n\n   if(country){\n     changeableUrl=`${url}/countries/${country}`;\n   }\n\n\n   try {\n       const {data: { confirmed,recovered,deaths,lastUpdate}} = await axios.get(changeableUrl);\n\n       return { confirmed,recovered, deaths,lastUpdate}\n       \n   } catch (error) {\n       console.log(error)\n   }\n}\n\nexport const fetchDailyData = async ()=>{\n  try {\n    const {data} = await axios.get(`${url}/daily`);\n\n    const modifiedData = data.map((dailyData)=>({\n      confirmed: dailyData.confirmed.total,\n      deaths: dailyData.deaths.total,\n      date : dailyData.reportDate,\n  }));\n  return modifiedData\n  } catch (error) {\n    \n  }\n}\n\nexport const fetchCountries = async ()=>{\n  try {\n    const {data : {countries}} = await axios.get(`${url}/countries`)\n    \n    return countries.map((country) => country.name);\n  } catch (error) {\n    console.log(error)\n    \n  }\n}","import React from 'react';\nimport {Card,CardContent,Typography,Grid, } from '@material-ui/core';\nimport styles from './Cards.module.css';\nimport CountUp from 'react-countup';\nimport cx from 'classnames'\n\n\nconst Cards = ( {data: {confirmed,recovered,deaths,lastUpdate}}) =>{\n    if(!confirmed){\n        return 'Loading......';\n    }\n    return(\n        <div className={styles.container} >\n            <Grid container spacing={3} justify=\"center\">\n                <Grid item component={Card}  xs={12} md={3} className={cx(styles.card,styles.infected)}>\n                    <CardContent>\n                        <Typography color =\"textSecondary\" gutterBottom>Infected</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp start={0} end = {confirmed.value} duration={2.5} separator=\",\" />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of active cases of covid-19</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card}  xs={12} md={3} className={cx(styles.card,styles.recovered)}>\n                    <CardContent>\n                        <Typography color =\"textSecondary\" gutterBottom>Recovered</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp start={0} end = {recovered.value} duration={2.5} separator=\",\" />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of recoveries from covid-19</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card}  xs={12} md={3} className={cx(styles.card,styles.deaths)}>\n                    <CardContent>\n                        <Typography color =\"textSecondary\" gutterBottom>Deaths</Typography>\n                        <Typography variant=\"h5\">\n                        <CountUp start={0} end = {deaths.value} duration={2.5} separator=\",\" />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of death caused by covid-19</Typography>\n                    </CardContent>\n                </Grid>\n\n\n\n\n            </Grid>\n\n        </div>\n    )\n}\n\nexport default Cards","import React ,{useState,useEffect} from 'react';\nimport {fetchDailyData} from '../../api';\nimport {Line,Bar} from 'react-chartjs-2';\n\n\nimport styles from './Chart.module.css';\nconst Chart = ({data : {confirmed,recovered,deaths},country}) =>{\n    const [dailyData, setDailyData] = useState([]); \n\n    useEffect(()=>{\n        const fetchAPI = async () =>{\n            setDailyData( await fetchDailyData());\n        }\n\n\n        fetchAPI();\n    },[]);\n\n    const lineChart = (\n        dailyData.length ? (<Line\n        data={{\n            labels:dailyData.map(({ date })=> date),\n            datasets: [{\n                data: dailyData.map(({ confirmed })=> confirmed),\n                label:'Infected',\n                borderColor: '#3333ff',\n                fill: true,\n            },{\n                data: dailyData.map(({deaths })=> deaths),\n                label:'Deaths',\n                borderColor: 'red',\n                backgroundColor:'rgba(255,0,0,0.5)',\n                fill: true, \n            }],\n        }}\n        />) : null\n    );\n    console.log(confirmed,recovered,deaths);\n\n    const barChart =(\n        confirmed ?\n        (\n            <Bar\n            data ={{\n                labels:['Infected','Recovered','Deaths'],\n                datasets:[{\n                    label:'People',\n                    backgroundColor:['rgba(0,0,255,0.5)','rgba(0, 255, 21, 0.5)','rgba(240, 20, 5, 0.5)'],\n                    data:[confirmed.value,recovered.value,deaths.value]\n                }]\n            }}\n            options={{\n                legend:{display:false},\n                title:{display:true ,text:`Current state in ${country}`}\n            }}\n            />\n        ): null\n    )\n    return(\n        <div className={styles.container}>\n            {country ? barChart : lineChart}\n        </div>\n    )\n}\n\nexport default Chart","import React ,{useState,useEffect }from 'react';\nimport {NativeSelect, FormControl, } from '@material-ui/core';\nimport styles from './CountryPicker.module.css'\n\nimport {fetchCountries} from '../../api';\nconst CountryPicker = ( {handleCountryChange }) =>{\n    const [fetchedCountries , setFetchedCountries ] = useState([]);\n\n\n    useEffect(() =>{\n        const fetchAPI = async () =>{\n            setFetchedCountries(await fetchCountries());\n        }\n        fetchAPI();\n    },[setFetchedCountries]);\n    \n    return(\n        <FormControl className={styles.formControl}>\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\n                <option value=\"\">Global </option>\n                {fetchedCountries.map((country,i) => <option key={i} value={country}>{country}</option>)}\n\n            </NativeSelect>\n        </FormControl>\n    )\n}\n\nexport default CountryPicker","export default __webpack_public_path__ + \"static/media/image.9e5d4fc7.png\";","\n\nimport React, { Component } from 'react'\n// import Cards from './components/Cards/Cards';\n// import Chart from './components/Chart/Chart';\n// import CountryPicker from './components/CountryPicker/CountryPicker';\nimport styles from './App.module.css';\nimport { fetchData} from './api';\nimport {Cards,Chart,CountryPicker } from './components';\nimport coronaImage from './images/image.png';\n class App extends Component {\n state = {\n     data :{},\n     country : '',\n }\n     async componentDidMount() {\n         const fetchedData = await fetchData();\n         this.setState({data:fetchedData});\n     }\n     handleCountryChange = async (country)=>{\n        const fetchedData = await fetchData(country);\n        this.setState({data:fetchedData, country:country});\n     } \n    \n    render() {\n        const { data,country} = this.state;\n        return (\n            <div className={styles.container}>\n                <image src ={coronaImage} className={styles.image} alt=\"COVID IMAGE\"/>\n                <Cards data={data}/>\n                <CountryPicker handleCountryChange={this.handleCountryChange}/>\n                <Chart data={data} country={country}/>\n            </div>\n        );\n    }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App'\n\nReactDOM.render(<App/> , document.getElementById('root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};"],"sourceRoot":""}